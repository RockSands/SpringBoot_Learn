<?xml version="1.0" encoding="UTF-8"?>
<!-- 参考:http://blog.csdn.net/inke88/article/details/75007649 -->
<!-- scan:是否动态更新 , scanPeriod:更新周期 , -->
<configuration scan="true" scanPeriod="60 seconds">
	<!-- configuration:property,定义变量,下文使用${KEY}引用,比如${LOG_HOME} -->
	<property name="LOG_HOME" value="/logs" />
	<property name="logback.appname" value="Spring_Boot_Learn" />

	<!-- configuration:contextName,设定上下文 -->
	<contextName>MyLogContext</contextName>

	<!-- configuration:appender,日志的格式定义 -->
	<!--输出到控制台Appender -->
	<appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
		<!--展示格式 layout -->
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d -1 %msg%n</pattern>
		</layout>
	</appender>

	<!-- 输出到文件appender-Info -->
	<appender name="fileInfoLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 
			Error 的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤 Error -->
			<level>ERROR</level>
			<!--匹配到就禁止 -->
			<onMatch>DENY</onMatch>
			<!--没有匹配到就允许 -->
			<onMismatch>ACCEPT</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${LOG_HOME}/info.${logback.appname}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${LOG_HOME}/info.${logback.appname}.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>
	<!-- 输出到文件appender-Error -->
	<appender name="fileErrorLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>Error</level>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${logback.logdir}/error.${logback.appname}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- configuration:root,配置默认的日志策略 -->
	<root level="ERROR">
		<appender-ref ref="consoleLog" />
	</root>
	
	<!-- configuration:logger -->
	<!-- logger,配置包与日志格式关系.下面仅指定name,未指定appender,所以采用Root的定义 -->
	<logger name="com.logger.file" level="DEBUG" additivity="false">
		<appender-ref ref="fileErrorLog" />
	</logger>
	    
	<!-- additivity=false,不向<root>转发.Level表示日志的级别 -->
    <logger name="com.logger.console" level="WARN" additivity="false">
        <appender-ref ref="consoleLog"/>
    </logger>
</configuration>